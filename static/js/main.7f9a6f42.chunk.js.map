{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","linkColors","groupColors","widths","transparencies","fg","zoom","_this2","react_default","a","createElement","react_force_graph_module","ref","el","graphData","data","nodeLabel","nodeColor","node","concat","group","nodeCanvasObject","ctx","globalScale","fontSize","font","measureText","id","width","map","n","fillStyle","strokeStyle","lineWidth","beginPath","arc","x","y","Math","PI","fill","stroke","textAlign","textBaseline","color","strokeText","fillText","linkLabel","link","source","target","value","linkWidth","linkColor","linkDirectionalArrowLength","linkDirectionalArrowRelPos","linkCurvature","cameraPosition","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNA6EeA,cArEX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,WAAa,CACd,2BACA,yBACA,yBACA,yBAEJP,EAAKQ,YAAc,CACf,cACA,cACA,eACA,cACA,cACA,gBACA,gBAGJR,EAAKS,OAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC7CT,EAAKU,eAAiB,CAAC,EAAG,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAnBlDV,mFAwBfG,KAAKQ,GAAGC,KAAK,oCAGR,IAAAC,EAAAV,KACP,OACIW,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,IAAK,SAAAC,GAAQN,EAAKF,GAAKQ,GACvBC,UAAWC,EACXC,UAAW,QACXC,UAAW,SAAAC,GAAI,aAAAC,OAAWZ,EAAKL,YAAYgB,EAAKE,OAAjC,MACfC,iBAAkB,SAACH,EAAMI,EAAKC,GAC1B,IAAMC,EAAW,EACjBF,EAAIG,KAAJ,GAAAN,OAAcK,EAAd,iBACkBF,EAAII,YAAYR,EAAKS,IAAIC,MACpB,CAAC,GAAIJ,GAAUK,IAAI,SAAAC,GAAC,OAAIA,EAAe,GAAXN,IACnDF,EAAIS,UAAJ,OAAAZ,OAAuBZ,EAAKL,YAAYgB,EAAKE,OAA7C,KACAE,EAAIU,YAAc,QAClBV,EAAIW,UAAY,GAEhBX,EAAIY,YACJZ,EAAIa,IAAIjB,EAAKkB,EAAGlB,EAAKmB,EAAG,EAAG,EAAG,EAAIC,KAAKC,IACvCjB,EAAIkB,OACJlB,EAAImB,SAEJnB,EAAIoB,UAAY,OAChBpB,EAAIqB,aAAe,SACnBrB,EAAIS,UAAYb,EAAK0B,MACrBtB,EAAIW,UAAY,GAChBX,EAAIuB,WAAW3B,EAAKS,GAAIT,EAAKkB,EAAI,EAAGlB,EAAKmB,GACzCf,EAAIwB,SAAS5B,EAAKS,GAAIT,EAAKkB,EAAI,EAAGlB,EAAKmB,IAE3CU,UAAW,SAAAC,GAAI,SAAA7B,OAAO6B,EAAKC,OAAOtB,GAAnB,YAAAR,OAA2B6B,EAAKE,OAAOvB,GAAvC,OAAAR,OAA+C6B,EAAKG,QACnEC,UAAW,SAAAJ,GAAI,OAAIzC,EAAKJ,OAAO6C,EAAKG,QAEpCE,UAAW,SAAAL,GAAI,cAAA7B,OAAYZ,EAAKL,YAAY8C,EAAKC,OAAO7B,OAAzC,MAAAD,OAAoDZ,EAAKH,eAAe4C,EAAKG,OAA7E,MACfG,2BAA4B,SAAAN,GAAI,OAAIzC,EAAKJ,OAAO6C,EAAKG,QACrDI,2BAA4B,GAE5BC,cAAe,EACfC,eAAgB,CAACrB,EAAG,cAhEhBsB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7f9a6f42.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport { ForceGraph2D, ForceGraph3D, ForceGraphVR } from 'react-force-graph';\nimport SpriteText from 'three-spritetext';\nimport data from './json_generator/data';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.linkColors = [\n            'rgba(201, 201, 201, 0.5)',\n            'rgba(0, 255, 179, 0.5)',\n            'rgba(0, 132, 255, 0.5)',\n            'rgba(0, 26, 255, 0.5)'\n        ];\n        this.groupColors = [\n            '0, 122, 255',\n            '40, 205, 65',\n            '175, 82, 222',\n            '255, 59, 48',\n            '255, 149, 0',\n            '142, 142, 147',\n            '162, 132, 94',\n\n        ];\n        this.widths = [0, 1, 1, 1, 2, 2, 2, 2, 2, 5, 5];\n        this.transparencies = [0, .07, .07, .07, .1, .1, .1, .1, .1, .3, .3];\n\n    }\n\n    componentDidMount() {\n        this.fg.zoom(7);\n    }\n\n    render() {\n      return (\n          <ForceGraph2D\n              ref={el => { this.fg = el; }}\n              graphData={data}\n              nodeLabel={\"hello\"}\n              nodeColor={node => `rgb(${this.groupColors[node.group]})`}\n              nodeCanvasObject={(node, ctx, globalScale) => {\n                  const fontSize = 3;\n                  ctx.font = `${fontSize}px Sans-Serif`;\n                  const textWidth = ctx.measureText(node.id).width;\n                  const bckgDimensions = [10, fontSize].map(n => n + fontSize * .2); // some padding\n                  ctx.fillStyle = `rgb(${this.groupColors[node.group]})`;\n                  ctx.strokeStyle = 'white';\n                  ctx.lineWidth = 0.4;\n\n                  ctx.beginPath();\n                  ctx.arc(node.x, node.y, 2, 0, 2 * Math.PI);\n                  ctx.fill();\n                  ctx.stroke();\n\n                  ctx.textAlign = 'left';\n                  ctx.textBaseline = 'middle';\n                  ctx.fillStyle = node.color;\n                  ctx.lineWidth = 0.7;\n                  ctx.strokeText(node.id, node.x + 3, node.y);\n                  ctx.fillText(node.id, node.x + 3, node.y);\n              }}\n              linkLabel={link => `${link.source.id} âŸ¹ ${link.target.id} = ${link.value}`}\n              linkWidth={link => this.widths[link.value]}\n              // linkColor={link => this.linkColors[Math.floor(link.value / 3)]}\n              linkColor={link => `rgba(${this.groupColors[link.source.group]}, ${this.transparencies[link.value]})`}\n              linkDirectionalArrowLength={link => this.widths[link.value]}\n              linkDirectionalArrowRelPos={.5}\n              // linkDirectionalParticles={3}\n              linkCurvature={1}\n              cameraPosition={{x: 1000}}\n          />\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}